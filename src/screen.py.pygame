#!/usr/bin/env python

import pygame
from pygame.locals import *
import random
#pygame.init()
pygame.display.init()
import os
from pygame.locals import *
import math
import rospy
from hyve_msg.msg import EyesLook
from hyve_msg.msg import Animation
from hyve_msg.msg import TouchEvent
import roslib

#Permet de parametre la taille de l'ecran
screenX = 800
screenY = 480

scr = pygame.display.set_mode((screenX,screenY))
image_x = 0
image_y = 0

path = roslib.packages.get_pkg_dir('eyes')

#creation of order sprites list
sprites = pygame.sprite.OrderedUpdates()

#Espacement inter pupilles
space=250

#decallage = ((screenX-500)/2,(screenY-300)/2)
decallage = 65,5
centerl = ((screenX-420)/2, (screenY-112)/2+decallage[1]-60)
# Permet de parametrer le deplacement de la pupille dans les yeux
limitx=40
limity=40

hidden=0
animations = {}
animations["blink"] = 0


follow = ''
animate = ''
vitesse = 10
mutex = 0

#backgroundColor = (0,255,0)
#backgroundColor = (255,0,255)
#backgroundColor = (255,255, 255)
backgroundColor = (0,0, 100)

retinaBackgroundColor = (255,255,255)

class Background(pygame.sprite.Sprite):

    # Constructor. Pass in the color of the block,
    # and its x and y position
    def __init__(self):
       global screenX,  screenY;
       # Call the parent class (Sprite) constructor
       pygame.sprite.Sprite.__init__(self)

       # Create an image of the block, and fill it with a color.
       # This could also be an image loaded from the disk.
       self.image = pygame.Surface([screenX, screenY]).convert()
       #self.image.fill((255,255,255),special_flags=BLEND_RGB_ADD)
       self.image.fill( backgroundColor,special_flags=BLEND_RGB_ADD)
       self.rect = (0,0)

sprites.add( Background() );
class PreRetina( pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self) #call Sprite initializer
        self.image = pygame.Surface([670,350]).convert();
        self.image.fill( retinaBackgroundColor ) ; 
        self.rect  = decallage
    def eyesNumber(self, num):
        print "eyes  number" 
        print  num
        if num == 11 : 
            self.image.fill( backgroundColor ) ; 
        else :
            self.image.fill( retinaBackgroundColor ) ; 
    
preRetina = PreRetina();
sprites.add( preRetina );

class Retina( pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self) #call Sprite initializer
        self.image = pygame.image.load( path+  '/src/hyve-eyes-png/retine_sim.png').convert_alpha()
        self.rect = self.image.get_rect().move(centerl);
#        self.image.fill( (255,255,255) ,special_flags=BLEND_RGB_MULT)

retina = Retina()
sprites.add( retina );


class Eyes(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self) #call Sprite initializer
        self.images  = [ pygame.image.load(path + '/src/hyve-eyes-png/oeil-'+str(i)+'.png').subsurface(65,65,670,350).convert_alpha()  for i in range(1, 12) ]
        for i in range(0,11):
            self.images[i].fill( backgroundColor,special_flags=BLEND_RGB_MULT)
        self.images.append( pygame.Surface([0,0]).convert() )
        self.eyesVersion=0
        self.eyesNumber = 11
        self.image = self.images[ self.eyesVersion ];
        self.rect  = decallage
    def changeEyes(self):
        self.eyesVersion = ( self.eyesVersion + 1 )  % (self.eyesNumber +1)
        #print 'version :' + str(self.eyesVersion) + ' number : ' + str(self.eyesNumber)
        self.image = self.images[ self.eyesVersion ]
        preRetina.eyesNumber( self.eyesVersion)

eyes= Eyes()
sprites.add( eyes );

class Mustach( pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self) #call Sprite initializer
        mustachSprite = pygame.image.load( path + '/src/hyve-eyes-png/moustaches.png')
        self.images = mustachSprite.subsurface( 0 ,0 , 490 , 175 ).convert_alpha() , mustachSprite.subsurface( 491 ,0 , 490 , 175 ).convert_alpha(),  mustachSprite.subsurface( 982 ,0 , 490 , 175 ).convert_alpha() , pygame.Surface([0,0]).convert()
        self.mustachVersion=1
        self.mustachNumber = 3
        self.image = self.images[self.mustachVersion];
        self.rect = (screenX-490)/2 , (screenY-115-50)
    def changeMustach(self):
        self.mustachVersion = ( self.mustachVersion + 1 )  %( self.mustachNumber +1 )
        #print 'version :' + str(self.mustachVersion) + ' number : ' + str(self.mustachNumber)
        self.image = self.images[self.mustachVersion];

mustach = Mustach()
sprites.add( mustach );

#class Eyes:
#    image = [[eyes]]
    #image = dict([(image_x,[eyes.subsurface(x,y,500,300)for x in range(0,1000,500)]) for image_x,y in zip((0,1),range(0,300,300))])
#    x,y = decallage


def calculate(position, ballrect,center):

    global limitx
    global limity
    x = math.cos(math.radians(-position.x+90))*limitx
    y = math.cos(math.radians(-position.y+90))*limity
    p = (x-ballrect[0]+center[0],y-ballrect[1]+center[1])
    return p

def callback(data):
    global animate
    global src
    global allSprites
    global retina
    global centerl
    global centerr
    global vitesse
    global mutex

    image_y = 0
    image_x= 0
    position = data

    p = calculate(data, retina.rect,centerl)
    if mutex == 1:
        retina.rect = retina.rect.move(p)
    else:
        itteration = int(round(math.sqrt(p[0]*p[0]+p[1]*p[1])/vitesse))
        if (data.delay == 0 or itteration == 0):
            top = retina.rect.top
            left = retina.rect.left 
            retina.rect = retina.rect.move(p)
            if(top != retina.rect.top or left != retina.rect.left):
                drawAll()
        else:
            for x in xrange(0,itteration):
                retina.rect = retina.rect.move((p[0]/itteration,p[1]/itteration))
                #time.wait( ( 20/itteration, 20)[ itteration == 0 ] )
                if mutex == 1:
                    p = calculate(position, retina.rect,centerl)
                    retina.rect = retina.rect.move(p)
                    break

        hidden = 0

def touchback(data):
    global mustache
    global eyes
    if data.pressed == False :
        if data.y < screenY/2 :
            eyes.changeEyes()
        else:
            mustach.changeMustach()
        drawAll()

def listener():
    global follow
    global animate
    rospy.init_node('listener', anonymous=True)
    follow = rospy.Subscriber("EyesLook", EyesLook, callback, None ,1 )
    animate = rospy.Subscriber("animate", Animation, canimate, None, 1)
    touch = rospy.Subscriber("touch", TouchEvent , touchback, None, 1)
    rospy.spin()

def drawAll():
    print 'drawallt \n'
    sprites.draw(scr)
    pygame.display.update()

def canimate(anim):
    global hidden
    global animations
    global mutex
    mutex = 1
    time.wait(20)
    image_x = animations[anim.animation]
    hidden = 1
    for i in range(1,2):
        image_y = i
        drawAll()
        time.wait(anim.delay)
    hidden = 0
    mutex = 0

if __name__ == '__main__':
    print 'call drawll ll from main'
    drawAll()
    listener()
